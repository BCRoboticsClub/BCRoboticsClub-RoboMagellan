#include "simpletools.h"   
#include "servo.h"
#include "gps.h"  
#include "ping.h" 


void avoidObstacles();
void logicLoop();
int *cog; 

static volatile int m1 = 1;
static volatile int m2 = 0;
static volatile int propTurn = 12000;
static volatile int tempMotor;
static volatile int forwardSpeed = 0;
static volatile float bearing;
static volatile float distanceTo;
static volatile float currBearing;
static volatile int speedM1 = 350;
static volatile int speedM2 = 350;
static volatile int distance = 35;
static volatile int p2;
static volatile int p3;
static volatile int p5;
static volatile float deltaTheta;
static volatile float deltaTheta1;
static volatile int tempBearing;
  
static volatile int nav = 1, avoid = 0;



void distAndBearing(float lat2, float lon2)
{
  float R = 6371000;
  
  float lat1 = gps_latitude();
  float lon1 = gps_longitude();
  currBearing = gps_heading();

  float dLat = (lat2-lat1)*(PI/180);
  float dLon = (lon2-lon1)*(PI/180);

  float a = sin(dLat/2)*sin(dLat/2)+
            sin(dLon/2)*sin(dLon/2)*cos(lat1*(PI/180))*cos(lat2*(PI/180));
  float b = 2*atan2(sqrt(a), sqrt(1-a));
  
  bearing = (180/PI)*atan2(sin(dLon)*cos(lat2*(PI/180)),
            cos(lat1*(PI/180))*sin(lat2*(PI/180))-sin(lat1*(PI/180))*cos(lat2*(PI/180))*cos(dLon));
  
  if(bearing < 0){
    bearing = bearing+360;
  }    
  distanceTo = R*b;
 // print("Lat: %f, Lon: %f, bearing: %f \n", lat1, lon1, currBearing);
   print("currBearing:%f degrees \nBearing:%f degrees", currBearing, bearing);
  return;
}

void driveMotor(int pin, int pulseWidth)
{
  servo_speed(pin, pulseWidth);
  //printf("%d \n", pulseWidth);
}  

int truncateMotorValues(int mUs)
{
   int tempMotor;
   
   if(mUs > 500)
   {
    tempMotor = 500;
   }
   
   else if(mUs < -500) 
   {
    tempMotor = -500;
   }    
        
   else
   {
    tempMotor = mUs;
   }        
   
   return tempMotor;
      
}  

void navigateToTarget()
{
  while(1){  
  if(nav == 1){
  print("navigate"); 
  int propRotate = .15;
  forwardSpeed = 0;
  //distAndBearing(35.24531, -118.58182);

  if(currBearing > bearing && tempBearing != currBearing)
  {
    deltaTheta = currBearing-bearing;
    driveMotor(m1, 250);
    driveMotor(m2, truncateMotorValues((int)(propRotate*deltaTheta))); 
    pause(1000); 
  }    
  else if(currBearing < bearing && tempBearing != currBearing)
  {
    deltaTheta1 = -currBearing+bearing;
    driveMotor(m1, truncateMotorValues((int)(propRotate*deltaTheta)));
    driveMotor(m2, 250);
    pause(1000);  
  }  
  else
    {
      while(forwardSpeed < 300)
      {
        forwardSpeed += 50;
        driveMotor(m1, forwardSpeed);
        driveMotor(m2, forwardSpeed);   
      }       
    }  
  while(forwardSpeed < 300)
      {
        forwardSpeed += 50;
        driveMotor(m1, forwardSpeed);
        driveMotor(m2, forwardSpeed);   
      }   
  pause(1000);
  
    tempBearing = currBearing;

  }  
  }  
}


void avoidObstacles()
{
  while(1){
   if(avoid == 1){
    print("avoid");   
     p2 = ping_cm(2);
     p3 = ping_cm(3);
     p5 = ping_cm(5);
    if(p3 < distance || p2 < distance && p3 < distance &&  p5 < distance)
    {
      int propTurnM = 8000;
        
      driveMotor(m1, truncateMotorValues(-propTurnM/p3));
      driveMotor(m2, truncateMotorValues(-propTurnM/p3));
      pause(500);
      
      int randomNum = rand()%2;
      if (randomNum)
      {
      driveMotor(m1, truncateMotorValues(propTurn/p5));
      driveMotor(m2, 0);
      pause(500);  
      }
      else
      {      
      driveMotor(m1, 0);
      driveMotor(m2, truncateMotorValues(propTurn/p2));
      pause(500);
      }
      
    }    
  
    else if(p5 < distance || p3 < distance && p5 < distance)
    {
      driveMotor(m1, truncateMotorValues(propTurn/p5));
      driveMotor(m2, 0);  
    }
    
    else if(p2 < distance || p2 < distance && p3 < distance)
    {      
      driveMotor(m1, 0);
      driveMotor(m2, truncateMotorValues(propTurn/p2));
    }
        
    else
    {
      
      while(forwardSpeed < 250)
      {
        forwardSpeed += 50;
        driveMotor(m1, forwardSpeed);
        driveMotor(m2, forwardSpeed);   
      }       
      forwardSpeed = 0;
    }
  }
 }  
}  






int main()
{
// gps_open(7,8,4800); 
// simpleterm_open(); 
 
// driveMotor(m1, 250);
// driveMotor(m2, 250);
 //pause(6000);
 cog = cog_run(logicLoop, 256);
 simpleterm_close();  
// int *cog1 = cog_run(avoidObstacles, 128);
 //navigateToTarget();



}

void logicLoop(){
simpleterm_open(); 
while(1)
 {
   p2 = ping_cm(2);
   p3 = ping_cm(3);
   p5 = ping_cm(5);
   print("check");
     
     if(p2 > distance && p3 > distance &&  p5 > distance){
         nav = 1;
         avoid = 0;
       }         
     if(p2 < distance || p3 < distance ||  p5 < distance){
         nav = 0;
         avoid = 1;
       }         

}

}  
